//======================================================================
// scroller.a65
// ------------
// Big, proportinal scoller for the main part.
//
//
// (c) 2017 Joachim Str√∂mbergson
//======================================================================

//------------------------------------------------------------------
// Defines
//------------------------------------------------------------------
.label screen_start = $0400
.label screen_end   = $07e7
.label screen_base  = $0772
.label char_rom     = $d000
.label char_copy    = $3800
.label space_char   = $20
.label rowchars     = 40
.label start_row    = 14

.const state_init   = 1
.const state_next   = 2
.const state_update = 3
.const state_scroll = 4
.const state_done   = 5


//------------------------------------------------------------------
// Basic start code.
//------------------------------------------------------------------
.pc = $0801     "Basic uppstart."
	        :BasicUpstart(start)


//------------------------------------------------------------------
//------------------------------------------------------------------
* = $0900     "Scroller test code."
start:
                jsr fill_screen

more_chars:
                jsr wait_space
                jsr wait_time
                jsr fsm_update
                inc $d020
                jsr print_state
                jsr movl_rows
                jmp more_chars

                lda scroll_done
                bne more_chars
                rts


//------------------------------------------------------------------
//------------------------------------------------------------------
clear_screen:
                ldy #$00
                lda #space_char
clear1:
                sta $0400, y
                sta $0500, y
                sta $0600, y
                sta $0700, y
                iny
                bne clear1
                rts


//------------------------------------------------------------------
//------------------------------------------------------------------
fill_screen:
                ldy #$00
                lda #space_char
fill1:
                tya
                sta $0400, y
                sta $0500, y
                sta $0600, y
                sta $0700, y
                iny
                bne fill1
                rts


//------------------------------------------------------------------
//------------------------------------------------------------------
print_state:
                rts


//------------------------------------------------------------------
//------------------------------------------------------------------
wait_space:
                lda #$7f
                sta $dc00
                lda $dc01
                and #$10
                bne wait_space
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
wait_time:
                dec wait
                lda wait
                beq wait1
                jmp wait_time
wait1:
                dec wait + 1
                lda wait + 1
                beq wait2
                jmp wait_time
wait2:
                lda #$20
                sta wait + 1
                rts

wait:
.byte $00, $00


//------------------------------------------------------------------
//------------------------------------------------------------------
* = $1000 "FSM code and state."


//------------------------------------------------------------------
// fsm_update
// Perform the fsm update logic. Basically check state and
// jump to corresponding state handler.
//------------------------------------------------------------------
fsm_update:
                lda fsm_state
                cmp #state_init
                bne not_init
                jmp fsm_state_init
not_init:
                cmp #state_next
                bne not_next
                jmp fsm_state_next
not_next:
                cmp #state_update
                bne not_update
                jmp fsm_state_update
not_update:
                cmp #state_scroll
                bne not_scroll
                jmp fsm_state_scroll
not_scroll:
                cmp #state_done
                bne not_done
                jmp fsm_state_done
not_done:
                rts


//------------------------------------------------------------------
// fsm_state_init
// Initial state of fsm. Wait a delay number of iterations.
//------------------------------------------------------------------
fsm_state_init:
                rts


//------------------------------------------------------------------
// fsm_state_next
// We should try to grab the next char to modify unless done.
//------------------------------------------------------------------
fsm_state_next:
                rts


//------------------------------------------------------------------
// fsm_state_update
// There is at least one more char. Update the char pointers etc.
//------------------------------------------------------------------
fsm_state_update:
                rts


//------------------------------------------------------------------
// fsm_state_scroll
//------------------------------------------------------------------
fsm_state_scroll:
                rts


//------------------------------------------------------------------
// fsm_state_done
// All chars has been processed. We are done.
//------------------------------------------------------------------
fsm_state_done:
                rts


* = $2000 "move code."

//------------------------------------------------------------------
// movl_rows
// Move num_rows one char left starting with row start_row.
//------------------------------------------------------------------
movl_rows:
                ldy #$00
movl1:
                lda screen_start + ((rowchars) * (start_row + 0)) + 1, y
                sta screen_start + ((rowchars) * (start_row + 0)), y
                lda screen_start + ((rowchars) * (start_row + 1)) + 1, y
                sta screen_start + ((rowchars) * (start_row + 1)), y
                lda screen_start + ((rowchars) * (start_row + 2)) + 1, y
                sta screen_start + ((rowchars) * (start_row + 2)), y
                lda screen_start + ((rowchars) * (start_row + 3)) + 1, y
                sta screen_start + ((rowchars) * (start_row + 3)), y
                lda screen_start + ((rowchars) * (start_row + 4)) + 1, y
                sta screen_start + ((rowchars) * (start_row + 4)), y
                lda screen_start + ((rowchars) * (start_row + 5)) + 1, y
                sta screen_start + ((rowchars) * (start_row + 5)), y
                lda screen_start + ((rowchars) * (start_row + 6)) + 1, y
                sta screen_start + ((rowchars) * (start_row + 6)), y
                lda screen_start + ((rowchars) * (start_row + 7)) + 1, y
                sta screen_start + ((rowchars) * (start_row + 7)), y

                iny
                cpy #rowchars - 1
                bne movl1
                rts


//------------------------------------------------------------------
// State and counters for the FSM.
//------------------------------------------------------------------
fsm_state:
.byte state_init

scroll_done:
.byte $00


srolltext:
.encoding "screencode_mixed"
.text "This is a test scrolltext for the FairLight intro. "
.text "code, design by Watchman. Logo by Ogami.           "
.byte $00

//======================================================================
// EOF scroller.a65
//======================================================================
