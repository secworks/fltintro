//======================================================================
// fade_out.a65
// ------------
// Code for doing fade out effect.
// The code operates on three characters simultaneously.
//
// The code uses the following zero page addresses:
// f8-f9 as pointer to the screen
// fa-fb as pointer to the low byte table
// fc-fd as pointer to the high byte table
// fe-ff as temporary screen pointer during fold char replacement.
//
// (c) 2017 Joachim Str√∂mbergson
//======================================================================

//------------------------------------------------------------------
// Defines
//------------------------------------------------------------------
.label screen_start = $0400
.label screen_end   = $07e7
.label char_rom     = $d000
.label char_copy    = $3800
.const state_update = 0
.const state_done   = 255

//------------------------------------------------------------------
// Basic start code.
//------------------------------------------------------------------
.pc = $0801     "Basic uppstart"
	        :BasicUpstart(start)


//------------------------------------------------------------------
//------------------------------------------------------------------
* = $1000     "Folding char fade out"
start:
                sei
                jsr run_test_code
//                jsr real_code
forever:
                jmp forever


//------------------------------------------------------------------
// run test code routines to debug the functions.
//------------------------------------------------------------------
run_test_code:
//                jsr test_char_ctr
                jsr test_char_replace
//                jsr test_update_char_def
                rts


//------------------------------------------------------------------
// test_char_ctr
// Test case that verfies that the code that scans the screen
// and build pointer lists works as expected. Should get
// 9 chars counted.
//------------------------------------------------------------------
test_char_ctr:
                jsr clear_screen
                jsr write_test_chars
                jsr init_char_ptrs
                jsr init_screen_ptr
                jsr init_char_ctr
                jsr find_screen_chars
                rts

//------------------------------------------------------------------
// test_char_replace
// Test case that verifies that we can traverse the pointer
// list and access the identified chars on the screen.
//------------------------------------------------------------------
test_char_replace:
                jsr test_char_ctr
                jsr init_char_ptrs

//test_replace_loop:
//                lda screen_chars_done
//                beq test_replace_not_done
//                rts

//test_replace_not_done:
//                jsr update_screen_ptr
//                lda #$fe
//                sta rchar
//                jsr replace_char
//                jsr update_char_ptrs
//                jsr dec_char_ctr
//                jmp test_replace_loop


//------------------------------------------------------------------
// test_update_char_def
// Test case that verifies that we can find a char on the
// screen, copy the corresponding char definition to the definition
// area of another char and then replace the char on the screen
// to get the same look on the screen.
//------------------------------------------------------------------
test_update_char_def:
                jsr test_char_ctr
                jsr init_char_ptrs
                rts

//------------------------------------------------------------------
// write_test_chars
// Add some chars to the screen that we should find.
//------------------------------------------------------------------
write_test_chars:
                lda #01
                sta $0400
                sta $0410
                sta $0500
                sta $0510
                sta $0600
                sta $0610
                sta $0700
                sta $0710
                sta $07e7
                rts

//------------------------------------------------------------------
// real_code
// Main entry point for when the code is running as demo.
//------------------------------------------------------------------
real_code:
                sei
                jsr init_code
                jsr copy_and_swap
                jsr init_char_ptrs
                jsr init_char_ctr
                jsr find_screen_chars
                jsr init_raster_irq
                cli
                rts

//------------------------------------------------------------------
// init_code
// Set all variables to correct values.
//------------------------------------------------------------------
init_code:
                lda #$01
                sta fold_chars_done
                rts

//------------------------------------------------------------------
// copy_and_swap
// Copy char ROM and swap to the copy for char defs.
// Copy is located at 3800 - 3fff
//------------------------------------------------------------------
copy_and_swap:
                jsr copy_rom
                lda $d018
                ora #$0e
                sta $d018
                rts

//------------------------------------------------------------------
// copy_rom
// copy char ROM to RAM.
//------------------------------------------------------------------
copy_rom:
                ldx #$08
                lda #$33
                sta $01

                lda #$d0
                sta $f9
                lda #$38
                sta $fb
                ldy #$00
                sty $f8
                sty $fa

copy_loop:      lda ($f8),y
                sta ($fa),y
                iny
                bne copy_loop
                inc $f9
                inc $fb
                dex
                bne copy_loop
                lda #$37
                sta $01
                rts


//------------------------------------------------------------------
// init_raster_irq
// Set up raster interrupt at the beginning of the screen since
// we may update chars all over the screen.
//------------------------------------------------------------------
init_raster_irq:
                sei
                lda #$7f
                sta $dc0d
                sta $dd0d

                lda #$01
                sta $d01a

                lda #$1b
                sta $d011

                lda #$20
                sta $d012

                lda #<raster_irq
                sta $0314
                lda #>raster_irq
                sta $0315

                lda $dc0d
                lda $dd0d
                asl $d019
                cli
                rts

//------------------------------------------------------------------
// raster_irg
// Main raster interrupt handler.
//------------------------------------------------------------------
raster_irq:
                asl $d019
                lda fold_chars_done
                bne fold_done
                dec $d020
                jsr manipulate_chars
                inc $d020
                jmp $ea31
fold_done:
                lda #$00
                sta $d020
                jmp $ea31


//------------------------------------------------------------------
// manipulate_chars
// Subroutine that performs the char manipulation operation
// Note that the x register is used as index for the chars
// we use for the manipulation.
//
// delay_ctrs is the delay for each of the folding chars.
// fold_chars is the specific chars used to do the folding effect.
// state_vars is the fold state for a giben folding char.
// folding_char_ctr is the number of folding chars still active.
//------------------------------------------------------------------
manipulate_chars:
                ldx #$00
mc_loop:
                // Check if we the given fold char is done or not.
                lda state_vars, x
                cpx state_done
                beq mc_next

                // Update the delay counter for the given char
                // and see if we should update the char.
                dec delay_ctrs, x
                bne mc_next
                lda delay
                sta delay_ctrs, x

                // Check if we should perform folding or
                // load a new char definition
                dec state_vars, x
                bne mc_fold_char

                // The current char has been folded. We should
                // Replace the fold char with space.
                lda fold_chars_low_ptrs, x
                sta $fe
                lda fold_chars_high_ptrs, x
                sta $ff
                lda #$20
                ldy #$00
                sta ($fe), y

                // Check if we have more screen chars to process.
                lda screen_chars_done
                bne fold_new_char

                // We have no more chars. Turn off the given
                // fold char and decrease the counter of active
                // fold chars
                lda state_done
                sta state_vars, x
                jsr dec_fold_chars_ctr
                jmp mc_next

fold_new_char:
                // Copy the char definition for the char pointe to by the
                // temporary screen pointer to the definition for
                // the given fold char. The replace char on screen with
                // the given fold char
                jsr copy_char_definition
                lda fold_chars, x
                ldy #$00
                sta ($fe), y
                lda delay
                sta delay_ctrs, x
                jmp mc_next

mc_fold_char:
                // Perform folding on the given folding char.
                jsr fold_char
                lda delay
                sta delay_ctrs, x
                jmp mc_next

mc_next:
                inx
                cpx #$03
                bne mc_loop
                rts

//------------------------------------------------------------------
// dec_fold_chars_ctr
// Update the fold chars counter. If it reaches zero we
// set the done flag.
//------------------------------------------------------------------
dec_fold_chars_ctr:
                dec fold_chars_ctr
                beq fcc
                rts
fcc:
                lda #$01
                sta fold_chars_done
                rts

//------------------------------------------------------------------
// Here we need to reuse zp-pointers fa-fb and fc-fd
//------------------------------------------------------------------
copy_char_definition:
                jsr s_zp_ptrs_y

                // Make the f8-f9 zp point to the definition
                // of the char on the screen
                ldy #$00
                lda ($fe), y
                asl
                asl
                asl
                sta $f8
                lda ($fe), y
                lsr
                lsr
                lsr
                lsr
                lsr
                clc
                adc #$38
                sta $f9

                jsr s_zp_def_ptr
cp_loop:
                lda ($f8), y
                sta ($fa), y
                iny
                cpy #08
                bne cp_loop

                jsr r_zp_prts_y
                rts

//------------------------------------------------------------------
// Here we perform the actual folding operation.
//------------------------------------------------------------------
fold_char:
                jsr s_zp_ptrs_y
                jsr s_zp_def_ptr

                ldy #$03
fc1:
                lda ($fa), y
                iny
                sta ($fa), y
                dey
                dey
                bne fc1
                lda #$00
                sta ($fa), y


                ldy #$05
fc2:
                lda ($fa), y
                dey
                sta ($fa), y
                iny
                iny
                cpy #$08
                bne fc2
                lda #00
                ldy #$07
                sta ($fa), y
                jsr r_zp_prts_y
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
update_ptrs:
                jsr update_screen_ptr
                jsr inc_char_ptrs
                jsr dec_char_ctr
                rts


//------------------------------------------------------------------
// s_zp_ptrs_y
// Save the zp addresses we need to reuse. And the y reg.
//------------------------------------------------------------------
s_zp_ptrs_y:
                lda $f8
                pha
                lda $f9
                pha
                lda $fa
                pha
                lda $fb
                pha
                tya
                pha
                rts

//------------------------------------------------------------------
// r_zp_prts_y
// Restore the zp addresses we need to reuse. And the y reg.
//------------------------------------------------------------------
r_zp_prts_y:
                pla
                tay
                pla
                sta $fb
                pla
                sta $fa
                pla
                sta $f9
                pla
                sta $f8
                rts

//------------------------------------------------------------------
// Set fa-fb zo point to char def for the given fold char.
//------------------------------------------------------------------
s_zp_def_ptr:
                lda fold_chars, x
                asl
                asl
                asl
                sta $fa
                lda fold_chars, x
                lsr
                lsr
                lsr
                lsr
                lsr
                clc
                adc #$38
                sta $fb
                rts

//------------------------------------------------------------------
// find_screen_chars
//
// Scans the screen for all chars not being space (0x20). The
// 16-but address for each non space char is stored in two tables.
// The number of non space characters are also counted.
//------------------------------------------------------------------
find_screen_chars:
                ldy #$00
find_loop:
                lda ($f8), y
                cmp #$20
                beq next_char

                // Char is not space and we should store
                // its address in the tables, update table
                // pointers, and increase the char counter.
                lda $f8
                sta ($fa), y
                lda $f9
                sta ($fc), y

                inc $fa
                bne fl1
                inc $fb
fl1:
                inc $fc
                bne fl2
                inc $fd
fl2:
                jsr inc_char_ctr

                // Move search pointer forward.
next_char:
                lda $f9
                cmp #>screen_end
                bne notdone
                lda $f8
                cmp #<screen_end
                bne notdone
                rts
notdone:
                inc $f8
                bne find_loop
                inc $f9
                jmp find_loop

//------------------------------------------------------------------
//------------------------------------------------------------------
init_char_ptrs:
                lda #<char_ptr_low
                sta $fa
                lda #>char_ptr_low
                sta $fb

                lda #<char_ptr_high
                sta $fc
                lda #>char_ptr_high
                sta $fd
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
inc_char_ptrs:
                inc $fa
                bne inc_fc_fd
                inc $fb
inc_fc_fd:
                inc $fc
                bne no_inc_fd
                inc $fd
no_inc_fd:      rts

//------------------------------------------------------------------
//------------------------------------------------------------------
init_screen_ptr:
                lda #<screen_start
                sta $f8
                lda #>screen_start
                sta $f9
                rts

//------------------------------------------------------------------
// update_screen_ptr
// Update the screen pointer to the next char pointed to by
// the zp pointers into the screen pointer tables
//------------------------------------------------------------------
update_screen_ptr:
                ldy #$00
                lda ($fa), y
                sta $f8
                lda ($fc), y
                sta $f9
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
init_char_ctr:
                lda #$00
                sta screen_char_ctr
                sta screen_char_ctr + 1
                sta screen_chars_done
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
inc_char_ctr:
                inc screen_char_ctr
                bne no_hi_ctr
                inc screen_char_ctr + 1
no_hi_ctr:      rts

//------------------------------------------------------------------
//------------------------------------------------------------------
dec_char_ctr:
                dec screen_char_ctr
                bne dec_almost_done
                rts
dec_almost_done:
                dec screen_char_ctr + 1
                beq dec_done
                rts
dec_done:
                lda #$01
                sta screen_chars_done
                rts

//------------------------------------------------------------------
// Debug function. Prints the pointer info after finding chars.
//------------------------------------------------------------------
print_find_data:
                sei
                lda $fa
                sta screen_start
                lda $fb
                sta screen_start + 1

                lda $fc
                sta screen_start + 2
                lda $fd
                sta screen_start + 3

                lda screen_char_ctr
                sta screen_start + 4
                lda screen_char_ctr + 1
                sta screen_start + 5
                cli
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
clear_screen:
                lda #$20
                ldy #$00
clear_loop:
                sta screen_start, y
                sta screen_start + $100, y
                sta screen_start + $200, y
                sta screen_start + $300, y
                dey
                bne clear_loop
                rts

//------------------------------------------------------------------
// State variables
// Storage for state driving the functionality
//------------------------------------------------------------------
* = $1f00 "State variables"
screen_char_ctr:
.byte $00, $00

fold_chars_ctr:
.byte $04

screen_chars_done:
.byte $00

delay:
.byte $04

rchar:
.byte $00

fold_chars_done:
.byte $00

delay_ctrs:
.byte $01, $02, $03

state_vars:
.byte $00, $00, $00

fold_chars:
.byte $ee, $ef, $f0

fold_chars_low_ptrs:
.byte $00, $00, $00

fold_chars_high_ptrs:
.byte $00, $00, $00


//------------------------------------------------------------------
// Pointer tables
//------------------------------------------------------------------
* = $2000 "Screen char address pointer low bytes"
char_ptr_low:
.fill 1024, 0

* = $2400 "Screen char address pointer high bytes"
char_ptr_high:
.fill 1024, 0

//======================================================================
// prng.a65
//======================================================================
