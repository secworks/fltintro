//======================================================================
// fade_out.a65
// ------------
// Code for doing fade out effect.
// The code operates on three characters simultaneously.
//
// (c) 2017 Joachim Str√∂mbergson
//======================================================================

//------------------------------------------------------------------
// Defines
//------------------------------------------------------------------
.label screen_start = $0400
.label screen_end   = $07e7
.label char_rom     = $d000
.label char_copy    = $3800


//------------------------------------------------------------------
// Basic start code.
//------------------------------------------------------------------
.pc = $0801     "Basic uppstart"
	        :BasicUpstart(start)


//------------------------------------------------------------------
//------------------------------------------------------------------
* = $1000     "Folding char fade out"
start:
                sei
                jsr run_test_code
//                jsr real_code
forever:
                inc $d020
                jmp forever


//------------------------------------------------------------------
// run test code routines to debug the functions.
//------------------------------------------------------------------
run_test_code:
//                jsr test_char_ctr
//                jsr test_char_replace
                jsr test_update_char_def
                rts


//------------------------------------------------------------------
// test_char_ctr
// Test case that verfies that the code that scans the screen
// and build pointer lists works as expected. Should get
// 9 chars counted.
//------------------------------------------------------------------
test_char_ctr:
                jsr clear_screen
                jsr write_test_chars
                jsr init_char_ptrs
                jsr init_screen_ptr
                jsr init_char_ctr
                jsr find_screen_chars
                rts

//------------------------------------------------------------------
// test_char_replace
// Test case that verifies that we can traverse the pointer
// list and access the identified chars on the screen.
//------------------------------------------------------------------
test_char_replace:
                jsr test_char_ctr
                jsr init_char_ptrs

test_replace_loop:
                lda screen_chars_done
                beq test_replace_not_done
                rts

test_replace_not_done:
                jsr update_screen_ptr
                lda #$fe
                sta rchar
                jsr replace_char
                jsr update_char_ptrs
                jsr dec_char_ctr
                jmp test_replace_loop


//------------------------------------------------------------------
// test_update_char_def
// Test case that verifies that we can find a char on the
// screen, copy the corresponding char definition to the definition
// area of another char and then replace the char on the screen
// to get the same look on the screen.
//------------------------------------------------------------------
test_update_char_def:
                jsr test_char_ctr
                jsr init_char_ptrs
                rts

//------------------------------------------------------------------
// write_test_chars
// Add some chars to the screen that we should find.
//------------------------------------------------------------------
write_test_chars:
                lda #01
                sta $0400
                sta $0410
                sta $0500
                sta $0510
                sta $0600
                sta $0610
                sta $0700
                sta $0710
                sta $07e7
                rts

//------------------------------------------------------------------
// real_code
// Main entry point for when the code is running as demo.
//------------------------------------------------------------------
real_code:
                sei
                jsr copy_and_swap
                jsr init_char_ptrs
                jsr init_char_ctr
                jsr find_screen_chars
                jsr init_raster_irq
                cli
                rts

//------------------------------------------------------------------
// copy_and_swap
// Copy char ROM and swap to the copy for char defs.
// Copy is located at 3800 - 3fff
//------------------------------------------------------------------
copy_and_swap:
                jsr copy_rom
                lda $d018
                ora #$0e
                sta $d018
                rts

//------------------------------------------------------------------
// copy_rom
// copy char ROM to RAM.
//------------------------------------------------------------------
 copy_rom:
                ldx #$08
                lda #$33
                sta $01

                lda #$d0
                sta $f9
                lda #$38
                sta $fb
                ldy #$00
                sty $f8
                sty $fa

copy_loop:      lda ($f8),y
                sta ($fa),y
                iny
                bne copy_loop
                inc $f9
                inc $fb
                dex
                bne copy_loop
                lda #$37
                sta $01
                rts


//------------------------------------------------------------------
// init_raster_irq
// Set up raster interrupt at the beginning of the screen since
// we may update chars all over the screen.
//------------------------------------------------------------------
init_raster_irq:
                sei
                lda #$7f
                sta $dc0d
                sta $dd0d

                lda #$01
                sta $d01a

                lda #$1b
                sta $d011

                lda #$20
                sta $d012

                lda #<raster_irq
                sta $0314
                lda #>raster_irq
                sta $0315

                lda $dc0d
                lda $dd0d
                asl $d019
                cli
                rts

//------------------------------------------------------------------
// raster_irg
// Main raster interrupt handler.
//------------------------------------------------------------------
raster_irq:
                asl $d019
                lda folding_char_ctr
                beq fold_done
                dec $d020
                jsr manipulate_chars
                inc $d020
                jmp $ea31
fold_done:
                lda #$00
                sta $d020
                jmp $ea31


//------------------------------------------------------------------
// manipulate_chars
// Subroutine that performs the char manipulation operation
// Note that the x register is used as index for the chars
// we use for the manipulation.
//
// delay_ctrs is the delay for each of the folding chars.
// fold_chars is the specific chars used to do the folding effect.
// state_vars is the fold state for a giben folding char.
// folding_char_ctr is the number of folding chars still active.
//------------------------------------------------------------------
manipulate_chars:
                ldx #$00
mc_loop:
                dec delay_ctrs, x
                bne mc_next
                lda delay
                sta delay_ctrs, x

                lda fold_chars, x
                pha
                dec state_vars, x
                bne mc_fold_char

                lda #$04
                sta state_vars, x
                // jsr to routine that replace char on screen with the
                // the char from fold_chars.
                jmp mc_next

mc_fold_char:
                // jsr to fold char def function

mc_next:
                inx
                cpx #$03
                bne mc_loop

                rts


//------------------------------------------------------------------
//------------------------------------------------------------------
fold_fe_rows:
                lda $3ff5
                lda $3ff4
                lda $3ff6
                lda $3ff5
                lda $3ff7
                lda $3ff6

                lda $3ff2
                lda $3ff3
                lda $3ff1
                lda $3ff2
                lda $3ff0
                lda $3ff1

                lda #$00
                sta $3fff
                sta $3ff0
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
replace_char:
                ldy #$00
                lda rchar
                sta ($f8), y
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
update_ptrs:
                ldy #$00
                lda ($fa), y
                sta $f8
                lda ($fc), y
                sta $f9

                inc $fa
                bne up1
                inc $fb
up1:
                inc $fc
                bne up2
                inc $fd
up2:
                dec screen_char_ctr
                bne up3
                dec screen_char_ctr + 1
up3:
                rts


//------------------------------------------------------------------
//------------------------------------------------------------------
copy_char:
                ldy #$00
                lda ($f8), y
                asl
                asl
                asl
                sta $fe
                lda ($f8), y
                lsr
                lsr
                lsr
                lsr
                lsr
                clc
                adc #$38
                sta $ff
cc1:
                lda ($fe), y
                sta $3ff0, y
                iny
                cpy #$08
                bne cc1
                rts

//------------------------------------------------------------------
// find_screen_chars
//
// Scans the screen for all chars not being space (0x20). The
// 16-but address for each non space char is stored in two tables.
// The number of non space characters are also counted.
//
// The code uses the following zero page addresses:
// f8-f9 as pointer to the screen
// fa-fb as pointer to the low byte table
// fc-fd as pointer to the high byte table
//------------------------------------------------------------------
find_screen_chars:
                ldy #$00
find_loop:
                lda ($f8), y
                cmp #$20
                beq next_char

                // Char is not space and we should store
                // its address in the tables, update table
                // pointers, and increase the char counter.
                lda $f8
                sta ($fa), y
                lda $f9
                sta ($fc), y

                inc $fa
                bne fl1
                inc $fb
fl1:
                inc $fc
                bne fl2
                inc $fd
fl2:
                jsr inc_char_ctr

                // Move search pointer forward.
next_char:
                lda $f9
                cmp #>screen_end
                bne notdone
                lda $f8
                cmp #<screen_end
                bne notdone
                rts
notdone:
                inc $f8
                bne find_loop
                inc $f9
                jmp find_loop

//------------------------------------------------------------------
//------------------------------------------------------------------
init_char_ptrs:
                lda #<char_ptr_low
                sta $fa
                lda #>char_ptr_low
                sta $fb

                lda #<char_ptr_high
                sta $fc
                lda #>char_ptr_high
                sta $fd
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
update_char_ptrs:
                inc $fa
                bne inc_fc_fd
                inc $fb
inc_fc_fd:
                inc $fc
                bne no_inc_fd
                inc $fd
no_inc_fd:      rts

//------------------------------------------------------------------
//------------------------------------------------------------------
init_screen_ptr:
                lda #<screen_start
                sta $f8
                lda #>screen_start
                sta $f9
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
update_screen_ptr:
                ldy #$00
                lda ($fa), y
                sta $f8
                lda ($fc), y
                sta $f9
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
init_char_ctr:
                lda #$00
                sta screen_char_ctr
                sta screen_char_ctr + 1
                sta screen_chars_done
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
inc_char_ctr:
                inc screen_char_ctr
                bne no_hi_ctr
                inc screen_char_ctr + 1
no_hi_ctr:      rts

//------------------------------------------------------------------
//------------------------------------------------------------------
dec_char_ctr:
                dec screen_char_ctr
                bne dec_almost_done
                rts
dec_almost_done:
                dec screen_char_ctr + 1
                beq dec_done
                rts
dec_done:
                lda #$01
                sta screen_chars_done
                rts

//------------------------------------------------------------------
// Debug function. Prints the pointer info after finding chars.
//------------------------------------------------------------------
print_find_data:
                sei
                lda $fa
                sta screen_start
                lda $fb
                sta screen_start + 1

                lda $fc
                sta screen_start + 2
                lda $fd
                sta screen_start + 3

                lda screen_char_ctr
                sta screen_start + 4
                lda screen_char_ctr + 1
                sta screen_start + 5
                cli
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
clear_screen:
                lda #$20
                ldy #$00
clear_loop:
                sta screen_start, y
                sta screen_start + $100, y
                sta screen_start + $200, y
                sta screen_start + $300, y
                dey
                bne clear_loop
                rts

//------------------------------------------------------------------
// State variables
// Storage for state driving the functionality
//------------------------------------------------------------------
* = $1f00 "State variables"
screen_char_ctr:
.byte $00, $00

folding_char_ctr:
.byte $04

screen_chars_done:
.byte $00

delay:
.byte $04

rchar:
.byte $00

fold_chars_done:
.byte $00

delay_ctrs:
.byte $01, $02, $03

state_vars:
.byte $00, $00, $00

fold_chars:
.byte $ee, $ef, $f0

//------------------------------------------------------------------
// Pointer tables
//------------------------------------------------------------------
* = $2000 "Screen char address pointer low bytes"
char_ptr_low:
.fill 1024, 0

* = $2400 "Screen char address pointer high bytes"
char_ptr_high:
.fill 1024, 0

//======================================================================
// prng.a65
//======================================================================
