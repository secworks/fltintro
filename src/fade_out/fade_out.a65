//======================================================================
// fade_out.a65
// ------------
// Code for doing fade out effect.
// The code operates on three characters simultaneously.
//
// The code uses the following zero page addresses:
// 02 as counter for memcpy routine.
// f8-f9 as ptr to the screen. Source for copy, folding.
// fa-fb as ptr to the low byte table
// fc-fd as ptr to the high byte table
// fe-ff as ptr the screen. Destination for copy, folding.
//
// (c) 2017 Joachim Str√∂mbergson
//======================================================================

//------------------------------------------------------------------
// Defines
//------------------------------------------------------------------
.label screen_start   = $0400
.label screen_end     = $07e7
.label char_rom       = $d000
.label char_copy      = $3800
.const state_new      = 0
.const state_fold3    = 1
.const state_fold2    = 2
.const state_fold1    = 3
.const state_fold0    = 4
.const state_first    = 254
.const state_done     = 255
.const num_fold_chars = 1


* = $1000 "Main fade-out code."

//------------------------------------------------------------------
// init_code
// Set all variables to correct values.
//------------------------------------------------------------------
init_code:
                lda #$00
                sta fold_chars_done
                rts

//------------------------------------------------------------------
// copy_and_swap
// Copy char ROM and swap to the copy for char defs.
// Copy is located at 3800 - 3fff
//------------------------------------------------------------------
copy_and_swap:
                jsr copy_rom
                lda $d018
                ora #$0e
                sta $d018
                rts

//------------------------------------------------------------------
// copy_rom
// copy char ROM to RAM.
//------------------------------------------------------------------
copy_rom:
                ldx #$08
                lda #$33
                sta $01

                lda #$d0
                sta $f9
                lda #$38
                sta $fb
                ldy #$00
                sty $f8
                sty $fa

copy_loop:      lda ($f8),y
                sta ($fa),y
                iny
                bne copy_loop
                inc $f9
                inc $fb
                dex
                bne copy_loop
                lda #$37
                sta $01
                rts


//------------------------------------------------------------------
// manipulate_chars
// Subroutine that performs the char manipulation operation
// Note that the x register is used as index for the chars
// we use for the manipulation.
//
// delay_ctrs is the delay for each of the folding chars.
// fold_chars is the specific chars used to do the folding effect.
// state_vars is the fold state for a giben folding char.
// folding_char_ctr is the number of folding chars still active.
//------------------------------------------------------------------
manipulate_chars:
                ldx #$00
mc_loop:
                // Check if we the given fold char is done or not.
                lda state_vars, x
                cmp state_done
                beq mc_next

                // Update the delay counter for the given char
                // and see if we should do something with the char.
                dec delay_ctrs, x
                bne mc_next

                lda delay
                sta delay_ctrs, x

                // Check if we should perform folding or
                // load a new char definition
                lda state_vars, x
                cmp state_first
                beq update_fold_char
                cmp state_new
                beq replace_fold_char
                dec state_vars, x
                jmp mc_fold_char

replace_fold_char:
                // The current char has been folded. We should
                // Replace the fold char with space.
                lda fold_chars_low_ptrs, x
                sta $fe
                lda fold_chars_high_ptrs, x
                sta $ff
                lda #$20
                ldy #$00
                sta ($fe), y

                // Check if we have more screen chars to process.
                lda screen_chars_done
                bne update_fold_char

                // We have no more chars. Turn off the given
                // fold char and decrease the counter of active
                // fold chars
                lda state_done
                sta state_vars, x
                jsr dec_fold_chars_ctr
                jmp mc_next

update_fold_char:
                // Get the next screen char and store in fold char ptr
                // Then update pointer.
                ldy #$00
                lda ($fa), y
                sta fold_chars_low_ptrs, x
                lda ($fc), y
                sta fold_chars_high_ptrs, x
                jsr inc_char_ptrs
                jsr dec_char_ctr

                // Copy the char definition for the char pointed to by the
                // temporary screen pointer to the definition for
                // the given fold char. Then replace char on screen with
                // the given fold char
                // TODO: Change to set pointers correctly
                ldy #$00
                jsr memcpy

                lda fold_chars_low_ptrs, x
                sta $f8
                lda fold_chars_high_ptrs, x
                sta $f9
                lda fold_chars, x
                ldy #$00
                sta ($f8), y
                lda delay
                sta delay_ctrs, x
                jmp mc_next

mc_fold_char:
                // Perform folding on the given folding char.
//                jsr fold_char
                lda delay
                sta delay_ctrs, x
                dec state_vars, x
                jmp mc_next

mc_next:
                inx
                cpx num_fold_chars
                beq mc_done
                jmp mc_loop
mc_done:
                rts

//------------------------------------------------------------------
// dec_fold_chars_ctr
// Update the fold chars counter. If it reaches zero we
// set the done flag.
//------------------------------------------------------------------
dec_fold_chars_ctr:
                dec fold_chars_ctr
                beq fcc
                rts
fcc:
                lda #$01
                sta fold_chars_done
                rts

//------------------------------------------------------------------
// copy_char_definition
// Copy a sequence of bytes in memory. Does not check overlap.
// src: zp f8-f9
// dst: zp fe-ff
// len: zp 02
//------------------------------------------------------------------
memcpy:
                ldy #$00
memcpy_l1:      lda ($f8), y
                sta ($fe), y
                iny
                cpy $02
                bne memcpy_l1
                rts

//------------------------------------------------------------------
// Here we perform the actual folding operation.
//------------------------------------------------------------------
fold_char:
                lda fold_chars_low_ptrs, x
                sta $fe
                lda fold_chars_high_ptrs, x
                sta $ff
                ldy #$03
fc1:
                lda ($fe), y
                iny
                sta ($fe), y
                dey
                dey
                bne fc1
                lda #$00
                sta ($fe), y


                ldy #$05
fc2:
                lda ($fe), y
                dey
                sta ($fe), y
                iny
                iny
                cpy #$08
                bne fc2
                lda #00
                ldy #$07
                sta ($fe), y
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
update_ptrs:
                jsr update_screen_ptr
                jsr inc_char_ptrs
                jsr dec_char_ctr
                rts


//------------------------------------------------------------------
// s_zp_ptrs_y
// Save the zp addresses we need to reuse. And the y reg.
//------------------------------------------------------------------
s_zp_ptrs_y:
                lda $f8
                sta tmp_storage + 0
                lda $f9
                sta tmp_storage + 1
                lda $fa
                sta tmp_storage + 2
                lda $fb
                sta tmp_storage + 3
                sty tmp_storage + 4
                rts

//------------------------------------------------------------------
// r_zp_prts_y
// Restore the zp addresses we need to reuse. And the y reg.
//------------------------------------------------------------------
r_zp_prts_y:
                lda tmp_storage + 0
                sta $f8
                lda tmp_storage + 1
                sta $f9
                lda tmp_storage + 2
                sta $fa
                lda tmp_storage + 3
                sta $fb
                ldy tmp_storage + 4
                rts


//------------------------------------------------------------------
// Set fa-fb zo point to char def for the given fold char.
//------------------------------------------------------------------
s_zp_def_ptr:
                lda fold_chars, x
                asl
                asl
                asl
                sta $fa
                lda fold_chars, x
                lsr
                lsr
                lsr
                lsr
                lsr
                clc
                adc #$38
                sta $fb
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
fix_low_ptr:
                asl
                asl
                asl
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
fix_high_ptr:
                lsr
                lsr
                lsr
                lsr
                lsr
                clc
                adc #$38
                rts

//------------------------------------------------------------------
// find_screen_chars
//
// Scans the screen for all chars not being space (0x20). The
// 16-but address for each non space char is stored in two tables.
// The number of non space characters are also counted.
//------------------------------------------------------------------
find_screen_chars:
                ldy #$00
find_loop:
                lda ($f8), y
                cmp #$20
                beq next_char

                // Char is not space and we should store
                // its address in the tables, update table
                // pointers, and increase the char counter.
                lda $f8
                sta ($fa), y
                lda $f9
                sta ($fc), y

                inc $fa
                bne fl1
                inc $fb
fl1:
                inc $fc
                bne fl2
                inc $fd
fl2:
                jsr inc_char_ctr

                // Move search pointer forward.
next_char:
                lda $f9
                cmp #>screen_end
                bne notdone
                lda $f8
                cmp #<screen_end
                bne notdone
                rts
notdone:
                inc $f8
                bne find_loop
                inc $f9
                jmp find_loop

//------------------------------------------------------------------
//------------------------------------------------------------------
init_char_ptrs:
                lda #<char_ptr_low
                sta $fa
                lda #>char_ptr_low
                sta $fb

                lda #<char_ptr_high
                sta $fc
                lda #>char_ptr_high
                sta $fd
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
inc_char_ptrs:
                inc $fa
                bne inc_fc_fd
                inc $fb
inc_fc_fd:
                inc $fc
                bne no_inc_fd
                inc $fd
no_inc_fd:      rts

//------------------------------------------------------------------
//------------------------------------------------------------------
init_screen_ptr:
                lda #<screen_start
                sta $f8
                lda #>screen_start
                sta $f9
                rts

//------------------------------------------------------------------
// update_screen_ptr
// Update the screen pointer to the next char pointed to by
// the zp pointers into the screen pointer tables
//------------------------------------------------------------------
update_screen_ptr:
                ldy #$00
                lda ($fa), y
                sta $f8
                lda ($fc), y
                sta $f9
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
init_char_ctr:
                lda #$00
                sta screen_char_ctr
                sta screen_char_ctr + 1
                sta screen_chars_done
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
inc_char_ctr:
                inc screen_char_ctr
                bne no_hi_ctr
                inc screen_char_ctr + 1
no_hi_ctr:      rts

//------------------------------------------------------------------
//------------------------------------------------------------------
dec_char_ctr:
                dec screen_char_ctr
                bne dec_almost_done
                rts
dec_almost_done:
                dec screen_char_ctr + 1
                beq dec_done
                rts
dec_done:
                lda #$01
                sta screen_chars_done
                rts

//------------------------------------------------------------------
// Debug function. Prints the pointer info after finding chars.
//------------------------------------------------------------------
print_find_data:
                sei
                lda $fa
                sta screen_start
                lda $fb
                sta screen_start + 1

                lda $fc
                sta screen_start + 2
                lda $fd
                sta screen_start + 3

                lda screen_char_ctr
                sta screen_start + 4
                lda screen_char_ctr + 1
                sta screen_start + 5
                cli
                rts

//------------------------------------------------------------------
//------------------------------------------------------------------
clear_screen:
                lda #$20
                ldy #$00
clear_loop:
                sta screen_start, y
                sta screen_start + $100, y
                sta screen_start + $200, y
                sta screen_start + $300, y
                dey
                bne clear_loop
                rts

//------------------------------------------------------------------
// State variables
// Storage for state driving the functionality
//------------------------------------------------------------------
* = $1f00 "State variables"
screen_char_ctr:
.byte $00, $00

fold_chars_ctr:
.byte $04

screen_chars_done:
.byte $00

delay:
.byte $04

rchar:
.byte $00

fold_chars_done:
.byte $00

delay_ctrs:
.byte $01, $02, $03

state_vars:
.byte state_new, state_new, state_new

fold_chars:
.byte $ee, $ef, $f0

fold_chars_low_ptrs:
.byte $00, $00, $00

fold_chars_high_ptrs:
.byte $00, $00, $00

tmp_storage:
.byte $00, $00, $00, $00, $00


//------------------------------------------------------------------
// Pointer tables
//------------------------------------------------------------------
* = $2000 "Screen char address pointer low bytes"
char_ptr_low:
.fill 1024, 0

* = $2400 "Screen char address pointer high bytes"
char_ptr_high:
.fill 1024, 0


//======================================================================
// prng.a65
//======================================================================
