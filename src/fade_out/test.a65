//======================================================================
// fade_out.a65
// ------------
// Code for doing fade out effect.
// The code operates on three characters simultaneously.
//
// The code uses the following zero page addresses:
// 02 as counter for memcpy routine.
// f8-f9 as ptr to the screen. Source for copy, folding.
// fa-fb as ptr to the low byte table
// fc-fd as ptr to the high byte table
// fe-ff as ptr the screen. Destination for copy, folding.
//
// (c) 2017 Joachim Str√∂mbergson
//======================================================================

#import "fade_out.a65"

//------------------------------------------------------------------
// Defines
//------------------------------------------------------------------


//------------------------------------------------------------------
// Basic start code.
//------------------------------------------------------------------
.pc = $0801     "Basic uppstart"
	        :BasicUpstart(start)


//------------------------------------------------------------------
//------------------------------------------------------------------
* = $1000     "Start test code"
start:
                sei
                jsr run_test_code
forever:
                jmp forever


//------------------------------------------------------------------
// run test code routines to debug the functions.
//------------------------------------------------------------------
run_test_code:
//                jsr test_char_ctr
//                jsr test_char_replace
//                jsr test_update_char_def
                jsr test_swap_rom
                rts


//------------------------------------------------------------------
// test_char_ctr
// Test case that verfies that the code that scans the screen
// and build pointer lists works as expected. Should get
// 9 chars counted.
//------------------------------------------------------------------
test_char_ctr:
                jsr clear_screen
                lda #$01
                sta rchar
                jsr write_test_chars
                jsr init_char_ptrs
                jsr init_screen_ptr
                jsr init_char_ctr
                jsr find_screen_chars
                rts

//------------------------------------------------------------------
// test_char_replace
// Test case that verifies that we can traverse the pointer
// list and access the identified chars on the screen.
//------------------------------------------------------------------
//test_char_replace:
//                jsr test_char_ctr
//                jsr init_char_ptrs
//
//test_replace_loop:
//                lda screen_chars_done
//                beq test_replace_not_done
//                rts
//
//test_replace_not_done:
//                jsr update_screen_ptr
//                lda #$fe
//                sta rchar
//                jsr replace_char
//                jsr update_char_ptrs
//                jsr dec_char_ctr
//                jmp test_replace_loop


//------------------------------------------------------------------
// test_swap_rom
// Test that we can copy the system char ROM and manipulate chars.
//------------------------------------------------------------------
test_swap_rom:
                jsr clear_screen
                lda #$fe
                sta rchar
                jsr write_test_chars
                jsr copy_and_swap
                lda #$aa
                sta $3ff0
                sta $3ff1
                sta $3ff2
                sta $3ff3
                rts


//------------------------------------------------------------------
// test_copy_defs
// Test that we can copy the system char ROM and manipulate chars.
//------------------------------------------------------------------
test_copy_defs:
                jsr clear_screen
                lda #$fe
                jsr write_test_chars
                jsr copy_and_swap
                lda #$07
                jsr memcpy
                rts

//------------------------------------------------------------------
// test_update_char_def
// Test case that verifies that we can find a char on the
// screen, copy the corresponding char definition to the definition
// area of another char and then replace the char on the screen
// to get the same look on the screen.
//------------------------------------------------------------------
test_update_char_def:
                jsr test_char_ctr
                jsr init_char_ptrs
                rts

//------------------------------------------------------------------
// write_test_chars
// Add some chars to the screen that we should find.
//------------------------------------------------------------------
write_test_chars:
                lda rchar
                sta $0400
                sta $0410
                sta $0500
                sta $0510
                sta $0600
                sta $0610
                sta $0700
                sta $0710
                sta $07e7
                rts

//======================================================================
// prng.a65
//======================================================================
